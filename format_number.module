<?php
// $Id$

/**
 * @file
 * This module provides a method to configure number formats (site default and
 * user defined) with configurable decimal point and thousand separators.
 * The function <code>format_number($number, $decimals = 0)</code> can be used
 * by other contributed or custom modules to display numbers accordingly.
 */

/**
 * Implementation of hook_help().
 */
function format_number_help($path, $arg) {
  switch ($path) {
    case 'admin/help#format_number':
      return '<p>'. t('The <em>Format number</em> module provides a method to configure number formats (site default and user defined) with configurable decimal point and thousand separators. The function <code>format_number($number, $decimals = 0)</code> can be used by other contributed or custom modules to display numbers accordingly.') .'</p>';
  }
}

/**
 * Implementation of hook_perm().
 */
function format_number_perm() {
  return array('configure default number format');
}

/**
 * Implementation of hook_menu().
 */
function format_number_menu() {
  $items = array();
  $items['admin/settings/format_number'] = array(
    'title' => 'Number format',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('format_number_settings'),
    'access arguments' => array('configure default number format'),
  );
  return $items;
}

/**
 * Module settings form.
 */
function format_number_settings() {
  $form = array();
  $form['format_number_decimal_point'] = array(
    '#type' => 'textfield',
    '#title' => t('Decimal point'),
    '#size' => 1,
    '#maxlength' => 1,
    '#default_value' => variable_get('format_number_decimal_point', '.'),
    '#description' => t('Enter the character that will be used as decimal point. You may leave this empty.'),
  );
  $form['format_number_thousands_sep'] = array(
    '#type' => 'textfield',
    '#title' => t('Thousands separator'),
    '#size' => 1,
    '#maxlength' => 1,
    '#default_value' => variable_get('format_number_thousands_sep', ','),
    '#description' => t('Enter the character that will be used as thousands separator. You may leave this empty.'),
  );
  $form['format_number_user_configurable'] = array(
    '#type' => 'radios',
    '#title' => t('User-configurable number format'),
    '#default_value' => variable_get('format_number_user_configurable', 0),
    '#options' => array(t('Disabled'), t('Enabled')),
    '#description' => t('When enabled, users can set their own number formatting options and numbers rendered with the <em>format_number()</em> API will be displayed accordingly.'),
  );
  return system_settings_form($form);
}

/**
 * Implementation of hook_user().
 *
 * Allows users to individually set their theme and time zone.
 */
function format_number_user($type, $edit, &$user, $category = NULL) {
  if ($type == 'form' && $category == 'account' && variable_get('format_number_user_configurable', 0)) {
    $form = array();
    $form['format_number'] = array(
      '#type' => 'fieldset',
      '#title' => t('Number format settings'),
      '#weight' => 7,
      '#collapsible' => TRUE, '#collapsed' => FALSE,
    );
    $form['format_number']['decimal_point'] = array(
      '#type' => 'textfield',
      '#title' => t('Decimal point'),
      '#size' => 1,
      '#maxlength' => 1,
      '#default_value' => strlen($edit['decimal_point']) ? $edit['decimal_point'] : variable_get('format_number_decimal_point', '.'),
      '#description' => t('Enter the character that will be used as decimal point. You may leave this empty.'),
    );
    $form['format_number']['thousands_sep'] = array(
      '#type' => 'textfield',
      '#title' => t('Thousands separator'),
      '#size' => 1,
      '#maxlength' => 1,
      '#default_value' => strlen($edit['thousands_sep']) ? $edit['thousands_sep'] : variable_get('format_number_thousands_sep', ','),
      '#description' => t('Enter the character that will be used as thousands separator. You may leave this empty.'),
    );
    return $form;
  }
}

/**
 * Format a number with (site default or user defined) thousands separator and
 * decimal point.
 *
 * @param float $number
 *   The number being formatted.
 * @param int $decimals
 *   Number of decimal digits.
 */
function format_number($number, $decimals = 0) {
  static $decimal_point, $thousands_sep;
  global $user;
  if (!isset($decimal_point)) {
    $decimal_point = variable_get('format_number_decimal_point', '.');
    $thousands_sep = variable_get('format_number_thousands_sep', ',');
    if (variable_get('format_number_user_configurable', 0) && $user->uid) {
      if (strlen($user->decimal_point)) {
        $decimal_point = $user->decimal_point;
      }
      if (strlen($user->thousands_sep)) {
        $thousands_sep = $user->thousands_sep;
      }
    }
  }
  return check_plain(number_format($number, $decimals, $decimal_point, $thousands_sep));
}
